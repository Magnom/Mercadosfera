//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mercadosfera.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CERTIFICADOS> CERTIFICADOS { get; set; }
        public DbSet<COMUNIDADES> COMUNIDADES { get; set; }
        public DbSet<DES_TIPOTEXTO> DES_TIPOTEXTO { get; set; }
        public DbSet<FORMATOS> FORMATOS { get; set; }
        public DbSet<IMAGENES_PRODUCTOS> IMAGENES_PRODUCTOS { get; set; }
        public DbSet<LOCALIDADES> LOCALIDADES { get; set; }
        public DbSet<PAISES> PAISES { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<TIPOCERTIFICADO> TIPOCERTIFICADO { get; set; }
        public DbSet<TIPOPRODUCTO> TIPOPRODUCTO { get; set; }
        public DbSet<CATEGORIAS_TIPOSPRODUCTO> CATEGORIAS_TIPOSPRODUCTO { get; set; }
        public DbSet<PRODUCTOS> PRODUCTOS { get; set; }
        public DbSet<TIENDAS> TIENDAS { get; set; }
        public DbSet<TIENDAS_TEXTOS> TIENDAS_TEXTOS { get; set; }
        public DbSet<VENDEDORES> VENDEDORES { get; set; }
    
        public virtual ObjectResult<ProductSearch_Result> ProductSearch(string desc, string category, string zone, Nullable<double> priceMin, Nullable<double> priceMax, string store)
        {
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var zoneParameter = zone != null ?
                new ObjectParameter("zone", zone) :
                new ObjectParameter("zone", typeof(string));
    
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var storeParameter = store != null ?
                new ObjectParameter("store", store) :
                new ObjectParameter("store", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductSearch_Result>("ProductSearch", descParameter, categoryParameter, zoneParameter, priceMinParameter, priceMaxParameter, storeParameter);
        }
    
        public virtual ObjectResult<SelecValue> CategorySearch(string zona, string tienda, Nullable<double> minprice, Nullable<double> maxprice)
        {
            var zonaParameter = zona != null ?
                new ObjectParameter("zona", zona) :
                new ObjectParameter("zona", typeof(string));
    
            var tiendaParameter = tienda != null ?
                new ObjectParameter("tienda", tienda) :
                new ObjectParameter("tienda", typeof(string));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(double));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelecValue>("CategorySearch", zonaParameter, tiendaParameter, minpriceParameter, maxpriceParameter);
        }
    
        public virtual ObjectResult<SelecValue> StoreSearch(string categoria, string zona, Nullable<double> minprice, Nullable<double> maxprice)
        {
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var zonaParameter = zona != null ?
                new ObjectParameter("zona", zona) :
                new ObjectParameter("zona", typeof(string));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(double));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelecValue>("StoreSearch", categoriaParameter, zonaParameter, minpriceParameter, maxpriceParameter);
        }
    
        public virtual ObjectResult<SelecValue> ZoneSearch(string categoria, string tienda, Nullable<double> minprice, Nullable<double> maxprice)
        {
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var tiendaParameter = tienda != null ?
                new ObjectParameter("tienda", tienda) :
                new ObjectParameter("tienda", typeof(string));
    
            var minpriceParameter = minprice.HasValue ?
                new ObjectParameter("minprice", minprice) :
                new ObjectParameter("minprice", typeof(double));
    
            var maxpriceParameter = maxprice.HasValue ?
                new ObjectParameter("maxprice", maxprice) :
                new ObjectParameter("maxprice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelecValue>("ZoneSearch", categoriaParameter, tiendaParameter, minpriceParameter, maxpriceParameter);
        }
    
        public virtual ObjectResult<ProductoDetalle> GetProductosDetalle(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductoDetalle>("GetProductosDetalle", idProductoParameter);
        }
    
        public virtual ObjectResult<GetStore_Result> GetStore(Nullable<int> idTienda)
        {
            var idTiendaParameter = idTienda.HasValue ?
                new ObjectParameter("idTienda", idTienda) :
                new ObjectParameter("idTienda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStore_Result>("GetStore", idTiendaParameter);
        }
    
        public virtual ObjectResult<GetProductosImagenes_Result> GetProductosImagenes(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductosImagenes_Result>("GetProductosImagenes", idProductoParameter);
        }
    }
}
